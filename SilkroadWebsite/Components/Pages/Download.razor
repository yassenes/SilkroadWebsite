@page "/download"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using SilkroadWebsite.Components.Layout
@using SilkroadWebsite.Data
@using SilkroadWebsite.Data.Model.Web
@inject Data.ApplicationDbContext Data
@inject Microsoft.Extensions.Caching.Memory.IMemoryCache Cache

<Breadcrumb PageTitle="Downloads" BackgroundImage="/image/slider/2.jpg" />

@if (downloads != null)
{
<div class="subpage-content">
    <div class="container download-section py-5">
        <h2 class="text-center mb-4">Downloads</h2>
        <div class="row">
            @foreach (var download in downloads)
            {
                <div class="col-lg-3 col-md-6 mb-4">
                    <div class="card h-100 download-card">
                        <div class="card-body text-center">
                            <h5 class="card-title">@download.Hostname</h5>
                            <hr class="divider" />
                            <a href="@download.Url" target="_blank" class="d-block">
                                <img src="@download.Image" class="download-image-spaced mb-3" alt="@download.Hostname" />
                                <span class="btn btn-primary">Download</span>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="text-center mt-4">
            <div class="card summary-card">
                <div class="card-body">
                    <strong>@downloads.Count() Download Links</strong>
                </div>
            </div>
        </div>
    </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<DownloadLinks> downloads = new();

    protected override async Task OnInitializedAsync()
    {
        const string cacheKey = "DownloadLinksCache";
        if (!Cache.TryGetValue(cacheKey, out downloads))
        {
            downloads = await Data._DownloadLinks.ToListAsync();

            var cacheEntryOptions = new MemoryCacheEntryOptions
            {
                AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30),
                SlidingExpiration = TimeSpan.FromMinutes(10)
            };

            Cache.Set(cacheKey, downloads, cacheEntryOptions);
        }
    }
}