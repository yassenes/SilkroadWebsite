@page "/ranking/player"
@using Radzen.Blazor.Rendering;
@using SilkroadWebsite.Data.Model.Ranking
@using SilkroadWebsite.Components.Ranking.Pages.Card
@inject Data.ApplicationDbContext Data
@inject Data.ShardDbContext Shard
@inject DialogService DialogService
@inject NavigationManager Navigation

@attribute [StreamRendering]

<RankingView />

@if (pagedItems != null)
{
    <div class="data-grid">
        <table>
            <thead>
                <tr>
                    <th style="width: 80px; text-align: center;">#</th>
                    <th>Player</th>
                    <th>Guild</th>
                    <th>Level</th>
                    <th>Item Points</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in pagedItems)
                {
                    <tr>
                        <td style="text-align: center;">@((currentPage - 1) * pageSize + pagedItems.IndexOf(player) + 1)</td>
                        <td>
                            <div class="player-cell">
                                <img src="@GetCharImagePath(player.CharID)" alt="@player.CharName" class="char-image" />
                                <img src="@GetRaceImgPath(player.CharID)" alt="@player.CharName" class="race-image" />
                                <span class="player-name" @onclick="() => NavigateToPlayerPage(player.CharName)">@player.CharName</span>
                                <button class="info-button" @onclick="() => ViewCharacter(player.CharName)">i</button>
                            </div>
                        </td>
                        <td>
                            <div class="guild-cell">
                                <span class="guild-name" @onclick="() => NavigateToGuildPage(player.Guild)">@player.Guild</span>
                                <button class="info-button danger" @onclick="() => ViewGuild(player.Guild)">i</button>
                            </div>
                        </td>
                        <td>@player.Level</td>
                        <td>@player.ItemPoints</td>
                    </tr>
                }
            </tbody>
        </table>
        @*         <div class="pagination">
            <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
 *@
        <div class="pagination">
            <button @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">First</button>
            @*                 <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
 *@
            @if (totalPages > 5)
            {
                int startPage = Math.Max(1, currentPage - 2);
                int endPage = Math.Min(totalPages, startPage + 4);

                if (endPage - startPage < 4)
                {
                    startPage = Math.Max(1, endPage - 4);
                }
                for (int i = startPage; i <= endPage; i++)
                {
                    <button disabled="@(i == currentPage)" @onclick="() => GoToPage(i)">
                        @i
                    </button>
                }
            }
            else
            {
                @for (int i = 1; i <= totalPages; i++)
                {
                    <button disabled="@(i == currentPage)" @onclick="() => GoToPage(i)">
                        @i
                    </button>
                }
            }

            @*                 <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
 *@                <button @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">Last</button>
        </div>

        @*             <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
        </div> *@
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

<style>
    .data-grid table {
        width: 100%;
        border-collapse: collapse;
    }

    .data-grid th, .data-grid td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    .data-grid th {
        background-color: #f4f4f4;
        text-align: left;
    }

    .player-cell, .guild-cell {
        display: flex;
        align-items: center;
    }

    .char-image {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        margin-right: 8px;
    }

    .race-image {
        width: 19px;
        height: 19px;
        margin-right: 4px;
    }

    .player-name, .guild-name {
        cursor: pointer;
        color: blue;
        margin-right: auto;
    }

    .info-button {
        background-color: #17a2b8;
        color: white;
        border: none;
        padding: 5px 10px;
        cursor: pointer;
        border-radius: 4px;
    }

        .info-button.danger {
            background-color: #dc3545;
        }

        .info-button:hover {
            opacity: 0.8;
        }

    .pagination {
        margin-top: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .pagination button {
            margin: 0 5px;
            padding: 5px 10px;
            border: none;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            border-radius: 4px;
        }

            .pagination button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }
</style>

@code {
    IQueryable<PlayerEntity> itemsQueryable;
    List<PlayerEntity> itemsList;
    List<PlayerEntity> pagedItems;
    private Dictionary<int, int> charIdToRefObjId;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)itemsList.Count / pageSize);

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private void GoToPage(int page)
    {
        Console.WriteLine($"Page: {page.ToString()}");
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagedItems();
        }
    }

    private void NavigateToPlayerPage(string charName) => Navigation.NavigateTo($"/ranking/player/{charName}");
    private void NavigateToGuildPage(string charName) => Navigation.NavigateTo($"/ranking/guild/{charName}");

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        itemsQueryable = Data._Ranking_Player.OrderByDescending(p => p.ItemPoints).Take(1000).AsQueryable();
        itemsList = itemsQueryable.ToList();

        // Cache character data for efficient lookups
        charIdToRefObjId = Shard._Char.ToDictionary(x => x.CharID, x => x.RefObjID);

        UpdatePagedItems();
    }

    private void UpdatePagedItems()
    {
        pagedItems = itemsList.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            UpdatePagedItems();
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            UpdatePagedItems();
        }
    }

    public string GetCharImagePath(int charid)
    {
        if (charIdToRefObjId.TryGetValue(charid, out int refobjid))
        {
            return $"image/sro/chars/{refobjid}.gif";
        }
        return "image/sro/chars/default.gif";
    }

    public string GetRaceImgPath(int charid)
    {
        if (charIdToRefObjId.TryGetValue(charid, out int refobjid))
        {
            string race = "ch";

            if (refobjid >= 14875)
                race = "eu";

            return "image/info/" + race + ".png";
        }
        return "image/sro/chars/default.gif";
    }

    async Task ViewGuild(string guildName)
    {
        await DialogService.OpenAsync<GuildCard>($"Guild {guildName}",
                            new Dictionary<string, object>() { { "GuildName", guildName } },
                            new DialogOptions() { Width = "700px", Height = "600px" });

    }

    async Task ViewCharacter(string charname)
    {
        await DialogService.OpenAsync<PlayerCard>($"Player {charname}",
                            new Dictionary<string, object>() { { "CharName", charname } },
                            new DialogOptions() { Width = "700px", Height = "650px" });

    }
}
